<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dsc on Jess Pomfret</title><link>https://jpomfret.github.io/tags/dsc/</link><description>Recent content in dsc on Jess Pomfret</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Wed, 04 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://jpomfret.github.io/tags/dsc/index.xml" rel="self" type="application/rss+xml"/><item><title>Desired State Configuration: A few warnings when using PSDscRunAsCredentials</title><link>https://jpomfret.github.io/p/desired-state-configuration-a-few-warnings-when-using-psdscrunascredentials/</link><pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate><guid>https://jpomfret.github.io/p/desired-state-configuration-a-few-warnings-when-using-psdscrunascredentials/</guid><description>&lt;p>When you enact a configuration against a target node by default the process runs as the local system account.  For most of your DSC resources this is fine. However, if you need to access something like a file share, active directory or user registry settings, you might start to run into permission issues.  &lt;/p>
&lt;p>DSC Resources have a built in property, &lt;code>PSDscRunAsCredential&lt;/code>, that when configured changes the account that the resource will be executed under.&lt;/p>
&lt;p>To use this you will use a &lt;code>PSCredential&lt;/code> object in your resources as shown below. Note that this example doesn’t require the use of other credentials and would have had the required permissions as the local system account.&lt;/p>
&lt;p>$Cred = Get-Credential
Configuration DtcServiceRunning {&lt;/p>
&lt;pre>&lt;code>Import-DscResource -ModuleName PSDesiredStateConfiguration
Node 'dscsvr2' {
Service MsDtcRunning {
Name = 'MSDTC'
Ensure = 'Present'
State = 'Running'
PsDscRunAsCredential = ($creds)
}
}
&lt;/code>&lt;/pre>
&lt;p>}&lt;/p>
&lt;h1 id="generates-mof-file">Generates MOF file&lt;/h1>
&lt;p>DtcServiceRunning -Output .\Output\&lt;/p>
&lt;p>When you use credentials in your configurations there are a couple of gotchas- we’ll talk through these next.&lt;/p>
&lt;h3 id="warning-1-plain-text-passwords">Warning 1: Plain Text Passwords&lt;/h3>
&lt;p>Although it feels like you are handling the credential securely, when you run the code above you will get an error explaining that storing passwords in plain text is a bad idea.&lt;/p>
&lt;p>&lt;a class="link" href="https://jesspomfret.com/wp-content/uploads/2019/09/01_PlainTextPasswords.jpg" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/01_PlainTextPasswords.jpg"
loading="lazy"
alt="Converting and storing encrypted passwords as plain text is not recommended."
>&lt;/a>&lt;/p>
&lt;p>When you run your configuration, &lt;code>DtcServiceRunning&lt;/code> in my example, a MOF file is generated and with our current setup the passwords will be stored in plain text (you can read more about generating &lt;a class="link" href="https://jesspomfret.com/dsc-mof-files/" target="_blank" rel="noopener"
>MOF files here&lt;/a>). &lt;/p>
&lt;p>The correct way to handle this issue is to generate a certificate and use that to encrypt the MOF file, a topic I will blog about one day soon. To skirt around this issue in test we can add a configuration property that basically forces us to accept we know this is a bad idea, but we’re going for it anyway.&lt;/p>
&lt;p>$configData = @{
AllNodes = @(
@{
NodeName = &amp;ldquo;dscsvr2&amp;rdquo;
PsDscAllowPlainTextPassword = $true
PsDscAllowDomainUser = $true
}
)
}
DtcServiceRunning -Output .\Output\ -ConfigurationData $configData&lt;/p>
&lt;p>Once we run this we’ll see our MOF file has been successfully generated.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/02_moffile.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="warning-2-changing-the-password-used-in-a-mof-file">Warning 2: Changing the password used in a MOF file&lt;/h3>
&lt;p>Once you push your MOF file out to the target node and it is enacted, the MOF remains on the target node in a designated folder and is named &lt;code>current.mof&lt;/code>. The credentials, including the password (hopefully encrypted by a certificate!), are within the file.&lt;/p>
&lt;p>You can run a couple of commands to check your current configuration that compare the desired state, defined in the &lt;code>current.mof&lt;/code> file, to the nodes current state.&lt;/p>
&lt;p>If the password you used for the &lt;code>PsDscRunAsCredentials&lt;/code> property has changed since the MOF file was enacted you’ll get the following errors when you try and run &lt;code>Get-DscConfiguration&lt;/code> or &lt;code>Test-DscConfiguration&lt;/code>.&lt;/p>
&lt;p>&lt;a class="link" href="https://jesspomfret.com/wp-content/uploads/2019/09/04_testFailed.jpg" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/04_testFailed.jpg"
loading="lazy"
alt="The user name or password is incorrect."
>&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://jesspomfret.com/wp-content/uploads/2019/09/05_getfailed.jpg" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/05_getfailed.jpg"
loading="lazy"
alt="The user name or password is incorrect."
>&lt;/a>&lt;/p>
&lt;p>The user name or password is incorrect.&lt;/p>
&lt;p>To fix this you must rerun your configuration, which will in turn generate a new MOF file that contains the new password. Once this MOF file has been generated you’ll push it out to your target node.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/05_startDscConfiguration.jpg"
loading="lazy"
alt="Start-DscConfiguration"
>&lt;/p>
&lt;p>Now that the MOF file contains the new password you are able to check in on your current configuration again.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/06_test.jpg"
loading="lazy"
alt="Test-DscConfiguration"
>&lt;/p>
&lt;p>This wasn’t something I thought about before I used &lt;code>PsDscRunAsCredential&lt;/code> on all the resources in my configuration.  A while later I went to check on my target nodes and realized I couldn’t without pushing out a new MOF file. After some discussion in the DSC Slack channel around this, the recommended approach is to only use &lt;code>PsDscRunAsCredential&lt;/code> if necessary, and to be aware of the requirement to generate a new MOF file once you change the password.&lt;/p></description></item><item><title>Desired State Configuration: Troubleshooting in Push Refresh Mode</title><link>https://jpomfret.github.io/p/desired-state-configuration-troubleshooting-in-push-refresh-mode/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate><guid>https://jpomfret.github.io/p/desired-state-configuration-troubleshooting-in-push-refresh-mode/</guid><description>&lt;p>One of the biggest obstacles people face when using DSC is the troubleshooting and reporting pieces. There are options here to integrate with third party tools to create a more polished enterprise solution, but if you’re going with just straight DSC you might feel it is lacking some in this area.&lt;/p>
&lt;p>We do however have several tools available to troubleshoot issues with configurations or to monitor our nodes to determine whether they are still in the desired state. I’m specifically going to look at the options available if you’re using DSC in the Push refresh mode. If you are using DSC in pull mode with a web server or if you’re using Azure Automation you have some other options available. You can configure the Local Configuration Manager (LCM) to send reports to the pull server. These reports are stored in a database on the server and can be accessed by calling the web service. Perhaps the topic of another blog post.&lt;/p>
&lt;p>The options we’ll look at today are the functions available within the &lt;code>PSDesiredStateConfiguration&lt;/code> module, and the DSC Windows event logs.&lt;/p>
&lt;h3 id="psdesiredstateconfiguration-functions">&lt;strong>PSDesiredStateConfiguration Functions&lt;/strong>&lt;/h3>
&lt;p>We should be fairly familiar with this module as it comes built in with WMF 4.0+ and contains several base resources as well as functions to manage and use DSC.&lt;/p>
&lt;p>In order for us to explore these commands we need to have a target node with an active configuration. I pushed out a simple configuration that will ensure the directory &lt;code>c:\temp&lt;/code> exists on the target node. The configuration was successful and the folder was created.&lt;/p>
&lt;p>First up we have &lt;code>Get-DscConfiguration&lt;/code>. The command based help for this function says it will get “the&lt;br>
current configuration of the nodes.” When I run this against my target node it returns details about the file resource I used to create the &lt;code>C:\temp&lt;/code> directory and notes that &lt;code>Ensure&lt;/code> is &lt;code>Present&lt;/code>. This is as I would expect.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/get_present.jpg"
loading="lazy"
>&lt;/p>
&lt;p>If I manually delete the &lt;code>C:\Temp&lt;/code> folder, the node is no longer in the desired state. When I rerun &lt;code>Get-DscConfiguration&lt;/code> it shows the folder is absent, which is not the behavior I expected from the help. I was expecting to get the current configuration that had been pushed out to the node. It seems that this function returns the resources included in the configuration and their current state. It does not however indicate if this is the desired state.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/Get_Absent.jpg"
loading="lazy"
>&lt;/p>
&lt;p>The next function available is &lt;code>Get-DscConfigurationStatus&lt;/code> The description of this function states it will retrieve “detailed information about completed configuration runs on the system.”   If we run that with just the &lt;code>-CimSession&lt;/code> parameter to connect to our node we get some useful information about the last run. &lt;/p>
&lt;p>However, there is a lot of information available from this function that is not within the default columns returned. If we look into the output further we can in fact see whether resources are in the desired state or not.  &lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/Get-DscConfigurationStatus_additionalCOls.jpg"
loading="lazy"
>&lt;/p>
&lt;p>During my testing using &lt;code>Get-DscConfigurationStatus&lt;/code> it did not always accurately report when there were resources not in the desired state. Therefore I wouldn’t rely on it for reporting, I would instead look at our third option below.&lt;/p>
&lt;p>The third and final function I’ll highlight from this module is &lt;code>Test-DscConfiguration&lt;/code>. The comment based help for this one states it “tests whether the actual configuration on the nodes matches the desired configuration.”&lt;/p>
&lt;p>Just running this with the target node as the &lt;code>-ComputerName&lt;/code> parameter does not provide much information. It returns `False` telling us it is not in the desired state, but doesn’t explain why.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/Test_basic.jpg"
loading="lazy"
>&lt;/p>
&lt;p>Running with the &lt;code>-Verbose&lt;/code> switch goes into details. It returns the same verbose output you would get from running the configuration in the first place. However, reading through the output of a large configuration file with many resources could get time consuming and it would be easy to miss resources not in their desired state. &lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/Test_verbose.jpg"
loading="lazy"
>&lt;/p>
&lt;p>Finally, we can use the &lt;code>-Detailed&lt;/code> parameter which will return a PowerShell object with exactly the information we’re looking for.  This object gives us more options on how to use this information. For example, we can return whether it is in the desired state and a list of resources not in the desired state is available.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/Test_detailed.jpg"
loading="lazy"
>&lt;/p>
&lt;p>This gives us some good information if our configuration was successful, but what happens if we’re troubleshooting a failed configuration? Running both &lt;code>Get-DscConfiguration&lt;/code> and &lt;code>Test-DscConfiguration&lt;/code> state they will run against a pending configuration and both return the error that the network path wasn’t found.  No information is returned on which resource threw this error. If you have a large, complicated configuration it would be nice to receive a little more guidance on where to look next. Hint, it’s the event logs.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/get_test_failed.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="windows-event-logs">Windows Event Logs&lt;/h3>
&lt;p>The next step in the troubleshooting handbook is to head to the windows event logs.  DSC has four event logs, but only two are enabled by default, and it doesn’t seem like much gets written to the Admin log.&lt;/p>
&lt;p>Running the following will show you the enabled logs and the number of records:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Get-WinEvent -ComputerName dscsvr2 -ListLog *dsc*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://jpomfret.github.io/images/wineventlogs.jpg"
loading="lazy"
>&lt;/p>
&lt;p>Looking in the Operational log you can find the error and the related resource:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Get-WinWvent -ComputerName dscsvr2 `
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -LogName Microsoft-Windows-DSC/Operational -MaxEvents 10 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Select-Object TimeCreated, Message |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Format-List
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://jesspomfret.com/wp-content/uploads/2019/07/eventlogerror.jpg" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/eventlogerror.jpg"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The event log also points to a json file that contains more detailed logging, this matches what would be returned if you ran the &lt;code>Start-DscConfiguration&lt;/code> with the &lt;code>-Verbose&lt;/code> and &lt;code>-Wait&lt;/code> switches.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Message : Job {93E0C95E-8F21-11E9-85A2-00155D016620} : Details logging completed for C:\Windows\system32\configuration\ConfigurationStatus\{93E0C95E-8F21-11E9-85A2-00155D016620}-0.details.json.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If more detail is needed you can enable the debug and analytic logs for DSC and rerun the configuration. The analytic logs will contain a lot more messages that will help you get to the bottom of why your configuration failed.&lt;/p></description></item><item><title>Desired State Configuration: Resources</title><link>https://jpomfret.github.io/p/desired-state-configuration-resources/</link><pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate><guid>https://jpomfret.github.io/p/desired-state-configuration-resources/</guid><description>&lt;p>A critical part of our DSC configuration is made up of resources. These are the building blocks we need to to define our desired state.  There are two kinds of resources that we can use: class based and MOF based (most common). We are going to focus our efforts today on looking at MOF based resources.&lt;/p>
&lt;p>Resources come packaged up as modules and our servers, which use at least WMF 4.0, come with several built-in. We have two main options for additional resources; we can find DSC resource modules in the PowerShell Gallery or we can write our own.&lt;/p>
&lt;h3 id="finding-dsc-resources">Finding DSC Resources&lt;/h3>
&lt;p>To find existing resources we have a few options. We could navigate to the &lt;a class="link" href="https://www.powershellgallery.com/packages?q=Tags%3A%22DSC%22" target="_blank" rel="noopener"
>PowerShell Gallery&lt;/a> website and browse through the modules with the ‘DSC’ tag. We could also use PowerShell by using the `Find-Module` command and the `-Tag` parameter to match our results from the PowerShell Gallery.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Find-Module -Tag DSC
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://jpomfret.github.io/images/Find-Modules.jpg"
loading="lazy"
>&lt;/p>
&lt;p>Our second option using PowerShell is to use &lt;code>Find-DscResource&lt;/code>. This cmdlet finds specific resources that are contained in modules. Running a count against that right now (4/1/2019) would return 1,413 resources that are available to configure our environment. Using the &lt;code>-Filter&lt;/code> parameter you can search for a keyword throughout the names, descriptions and tags of all these resources.&lt;/p>
&lt;h3 id="installing-resources">Installing Resources&lt;/h3>
&lt;p>If you find a DSC Resource you want to use in your configurations, for example to install SQL Server we will want to use SqlSetup from the SqlServerDsc module, you can install the module as you would a regular PowerShell module. For example, using &lt;code>Install-Module&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/Install-Module.jpg"
loading="lazy"
>&lt;/p>
&lt;p>Once the module is installed you can use these resources in your configurations. One thing to remember is the resources need to be available on both your authoring station and your target node.&lt;/p>
&lt;h3 id="five-useful-resources">Five Useful Resources&lt;/h3>
&lt;p>To wrap up I’m going to look at five resources I’ve used in my configurations to give you an idea of what is available.&lt;/p>
&lt;h4 id="file">File&lt;/h4>
&lt;p>The &lt;code>File&lt;/code> resource is one of the built-in resources and is useful for creating files and folders. For my SQL Servers I use it to create separate folders for the data, log, and tempdb files. Another use case would be to create a file and, by using the &lt;code>contents&lt;/code> property, we could even add data to it.&lt;/p>
&lt;h4 id="firewall">Firewall&lt;/h4>
&lt;p>Part of the &lt;code>NetworkingDsc&lt;/code> module, the &lt;code>Firewall&lt;/code> resource can be used to configure firewall rules on your target node. This is useful when installing SQL Server so you can open up access remotely. There is also a &lt;code>SqlWindowsFirewall&lt;/code> resource that will accomplish this task, but has less properties to configure. However, depending on your preferred setup, this may suffice.&lt;/p>
&lt;h4 id="sqlsetup">SqlSetup&lt;/h4>
&lt;p>&lt;code>SqlSetup&lt;/code> is the resource that installs SQL Server. Included in the &lt;code>SqlServerDsc&lt;/code> module there are many properties available to configure the installation just right.&lt;/p>
&lt;h4 id="script">Script&lt;/h4>
&lt;p>One of the most flexible resources is the &lt;code>Script&lt;/code>. This is also a built in resource and gives you the ability to code any PowerShell script into a simple resource. You basically write three mini functions: one that gets the current state, one that tests if it’s in the desired state, and finally one to ‘make it so’.&lt;/p>
&lt;h4 id="sqlagentoperatorhttpsgithubcompowershellsqlserverdscsqlagentoperator">&lt;a class="link" href="https://github.com/PowerShell/SqlServerDsc#sqlagentoperator" target="_blank" rel="noopener"
>SqlAgentOperator&lt;/a>&lt;/h4>
&lt;p>The final resource I’ve picked is part of the &lt;code>SqlServerDsc&lt;/code> module and allows you to create a SQL Agent operator. This is useful if you like to send alerts or notifications from your SQL Servers. The reason I picked this resource is that I wrote it. One of the best parts of DSC is that most of the modules are open source and available on Github. If there is a resource missing that you’d find useful, you are encouraged to write it and submit it to the Microsoft repos. That’s pretty cool if you ask me.&lt;/p></description></item><item><title>Desired State Configuration: Local Configuration Manager</title><link>https://jpomfret.github.io/p/desired-state-configuration-local-configuration-manager/</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate><guid>https://jpomfret.github.io/p/desired-state-configuration-local-configuration-manager/</guid><description>&lt;p>Once we have crafted the perfect configuration and shipped it out to our target nodes, it’s time for the magic to happen. The &lt;a class="link" href="https://jesspomfret.com/dsc-mof-files/" target="_blank" rel="noopener"
>MOF file that we created&lt;/a> by executing our configuration is translated and enacted by the Local Configuration Manager (LCM) on each target node. The LCM is the engine of DSC and plays a vital role in managing our target nodes.&lt;/p>
&lt;p>The LCM on each target node has many settings that can be configured using a meta configuration. This document is written very similarly to our regular DSC configurations and then pushed out to the target node.  I’m going to cover a few of the important LCM settings for use in &lt;code>push&lt;/code> mode. This is where the LCM passively waits for a MOF file to arrive. The other option is &lt;code>pull&lt;/code> mode- this is a little more complicated to set up and in this scenario the LCM is set to actively check in with a pull server for new configurations.&lt;/p>
&lt;h3 id="important-lcm-settings">&lt;strong>Important LCM Settings&lt;/strong>&lt;/h3>
&lt;p>As mentioned we are going to look at a subset of LCM settings. A full list is available at books online “&lt;a class="link" href="https://docs.microsoft.com/en-us/powershell/dsc/managing-nodes/metaconfig" target="_blank" rel="noopener"
>Configuring the Local Configuration Manager&lt;/a>”.&lt;/p>
&lt;p>[table id=6 /]&lt;/p>
&lt;h3 id="configure-the-lcm">Configure the LCM&lt;/h3>
&lt;p>We are going to change a couple of the LCM settings by writing a meta configuration document, compiling it as a MOF and pushing it to our target node. The LCM on that target node will receive this MOF file and enact it to put the LCM into the desired state. To start with we can check out the available settings by using the &lt;code>Get-DscLocalConfigurationManager&lt;/code> cmdlet.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Get-DscLocalConfigurationManager -CimSession dscsvr2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://jpomfret.github.io/images/get_before.jpg"
loading="lazy"
>&lt;/p>
&lt;p>We are going to change two settings in this example. First, I’m going to change the ConfigurationModeFrequencyMins to 20 minutes, instead of the default of 15.  Secondly, I will change the RebootNodeIfNeeded to true. This means if I push out a configuration that requires a reboot my node will automatically reboot.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[DSCLocalConfigurationManager()]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">configuration LCMConfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Node dscsvr2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Settings
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ConfigurationModeFrequencyMins = 20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> RebootNodeIfNeeded = $true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I’ll then execute the &lt;code>LCMConfig&lt;/code> configuration to generate a meta MOF file. You can see this is named with the target node name and then the extension is &lt;code>.meta.mof&lt;/code>. For a regular configuration the file would just be named with the target node name and the extension of just &lt;code>.mof&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">LCMConfig -Output .\output\
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://jpomfret.github.io/images/CreateMetaMof.jpg"
loading="lazy"
>&lt;/p>
&lt;p>We will then enact this configuration using &lt;code>Set-DscLocalConfigurationManager&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Set-DscLocalConfigurationManager -Path .\output\ -ComputerName dscsvr2 -Verbose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://jpomfret.github.io/images/set-DscLcm-1024x239.jpg"
loading="lazy"
>&lt;/p>
&lt;p>Once this is complete we can check our settings using the following:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Get-DscLocalConfigurationManager -CimSession dscsvr2 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Select-Object ConfigurationModeFrequencyMins, RebootNodeIfNeeded
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://jpomfret.github.io/images/get_after-1024x107.jpg"
loading="lazy"
>&lt;/p>
&lt;p>Now our LCM is in our defined desired state and we are ready to push out a configuration to set the desired state of our server.&lt;/p>
&lt;h3 id="applyandautocorrect">ApplyAndAutoCorrect&lt;/h3>
&lt;p>The LCM can also play an important role in keeping our servers in the desired state. If we changed the &lt;code>ConfigurationMode&lt;/code> to &lt;code>ApplyAndAutoCorrect&lt;/code> the LCM would check every 15 minutes (default value for &lt;code>ConfigurationModeFrequencyMins&lt;/code>) to ensure the server was still in the desired state. If it found it was not, the LCM would reenact the current MOF to put the server back to desired state. This is a pretty powerful feature but one that definitely requires some thought. I can imagine a 3rd party vendor wouldn’t be too happy if they set something on installation and my DSC configuration reverted that automatically.&lt;/p></description></item><item><title>Desired State Configuration: MOF Files</title><link>https://jpomfret.github.io/p/desired-state-configuration-mof-files/</link><pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate><guid>https://jpomfret.github.io/p/desired-state-configuration-mof-files/</guid><description>&lt;p>In my &lt;a class="link" href="https://jesspomfret.com/introduction-to-dsc/" target="_blank" rel="noopener"
>last Desired State Configuration (DSC) post&lt;/a> a couple of weeks ago I covered some of the concepts involved with DSC, and I also have a &lt;a class="link" href="https://jesspomfret.com/t-sql-tuesday-110/" target="_blank" rel="noopener"
>T-SQL Tuesday post&lt;/a> to get you started writing your first configuration. So today we are going to look at the next step in the process: what happens after we’ve written a configuration?&lt;/p>
&lt;p>Here’s a quick recap on how to write a simple configuration. I’ve named this configuration &lt;code>CreateSqlFolder&lt;/code>. I’m targeting the node &lt;code>dscsvr2&lt;/code> and within that node block I’m using the &lt;code>File&lt;/code> resource to define my desired state of having a directory &lt;code>C:\SQL2017\SQLData&lt;/code> exist. With the final line of the script I’m calling the configuration and specifying where the output should land.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Configuration CreateSqlFolder {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Import-DscResource -ModuleName PSDesiredStateConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Node dscsvr2 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> File CreateDataDir {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DestinationPath = &amp;#39;C:\SQL2017\SQLData\&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Ensure = &amp;#39;Present&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type = &amp;#39;Directory&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CreateSqlFolder -Output .\Output\
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="generate-a-mof-file">Generate a MOF file&lt;/h3>
&lt;p>When I run this script I see the output in the screenshot below, a MOF file has been created in my output folder. Managed Object Format (MOF) files are used to describe Common Information Model (CIM) classes, these are industry standards which gives us flexibility in working with DSC. In DSC this is important as the MOF file is the artefact that will actually be used to configure our nodes. This MOF will be delivered to our target node and enacted by the Local Configuration Manager (LCM).&lt;/p>
&lt;p>The LCM will be covered in more detail in a later post, but for now know that it can be configured to be in either ‘Push’ mode or ‘Pull’ mode.  Pull mode is more complicated to set up but perhaps more appropriate for managing a large number of servers.  For now, we will look at the ‘Push’ mode where we will deliver the MOF manually to the target node for the LCM to enact.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/CreateSqlFoldersMOF.jpg"
loading="lazy"
>&lt;/p>
&lt;p>Executing configuration to create a MOF file for target node.&lt;/p>
&lt;h3 id="publish-a-mof-file">Publish a MOF File&lt;/h3>
&lt;p>To get the MOF from my authoring station out to the target node I have a couple of options.  First, I can run &lt;code>Start-DscConfiguration&lt;/code>. This will push out the MOF and immediately enact the configuration.  Using the &lt;code>-wait&lt;/code> and &lt;code>-verbose&lt;/code> switches we can see the output returned to our PowerShell console as the configuration is applied.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Start-DscConfiguration -Path .\output\ -ComputerName dscsvr2 -Wait -Verbose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://jesspomfret.com/wp-content/uploads/2019/03/startDscConfiguration.png" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/startDscConfiguration-1024x242.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>If we want to push out the configuration but not immediately enact it we can use &lt;code>Publish-DscConfiguration&lt;/code>. I again used the &lt;code>-Verbose&lt;/code> switch to return output:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Publish-DscConfiguration -Path .\output\ -ComputerName dscsvr2 -Verbose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://jesspomfret.com/wp-content/uploads/2019/03/publishDscConfiguration.png" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/publishDscConfiguration-1024x122.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>You can see this in this screenshot it says ‘Configuration document successfully saved to pending state’, letting us know this is now ready for the LCM to enact. We can confirm our &lt;code>PendingConfiguration&lt;/code> by running the following:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Get-DscLocalConfigurationManager -CimSession dscsvr2 | Select LCMState
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://jesspomfret.com/wp-content/uploads/2019/03/getDscConfiguration.png" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/getDscConfiguration-1024x123.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>To enact the pending configuration we would again use &lt;code>Start-DscConfiguration&lt;/code>, only this time instead of specifying a path we’d add the &lt;code>-UseExisting&lt;/code> switch.&lt;/p>
&lt;p>&lt;a class="link" href="https://jesspomfret.com/wp-content/uploads/2019/03/startDscConfiguration_useexisting.png" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/startDscConfiguration_useexisting-1024x248.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>It is important to note that if the LCM settings are currently set to the defaults this configuration will be automatically applied when the next consistency check runs within 15 mins.&lt;/p>
&lt;p>Look for a post coming soon where we’ll look at the LCM in more detail and examine some of the settings we have to manage how it works within DSC.&lt;/p></description></item><item><title>Introduction to Desired State Configuration</title><link>https://jpomfret.github.io/p/introduction-to-desired-state-configuration/</link><pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate><guid>https://jpomfret.github.io/p/introduction-to-desired-state-configuration/</guid><description>&lt;p>I’m currently working on a pretty interesting project to explore using PowerShell’s Desired State Configuration (DSC) to manage SQL Servers. DSC uses declarative language to define the desired state of your infrastructure.&lt;/p>
&lt;p>Ensuring that the directory &lt;code>C:\Test&lt;/code> exists is a simple example. A more complicated example would be the complete configuration of a SQL Server. This is my end goal.&lt;/p>
&lt;p>This post is aiming to just introduce DSC and a few of the concepts that come along with it, and give us a good building block for future posts that dive deeper into this topic.&lt;/p>
&lt;p>The infrastructure that surrounds DSC warrants several posts on its own, so for this first scratch of the surface just know that we will write DSC Configuration documents and these documents will be managed and executed on our target nodes.&lt;/p>
&lt;h3 id="declarative-vs-imperative">Declarative Vs Imperative&lt;/h3>
&lt;p>If you are already familiar with PowerShell scripts you write imperative code, or the actual instructions on how to accomplish something. For example if I want to create a folder I’d write:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">New-Item -Path C:\test -ItemType Directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>However, when writing DSC configurations you use declarative language, where you describe the desired state without having to instruct exactly how to get there. Using the same example you would add the following resource block to your configuration document to ensure the &lt;code>C:\test&lt;/code> folder exists.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">File CreateTestDir {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DestinationPath = &amp;#39;C:\test&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Ensure = &amp;#39;Present&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type = &amp;#39;Directory&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="resources">Resources&lt;/h3>
&lt;p>Resources are one of the central building blocks in DSC. Each resource contains the code that takes the declarative syntax you write and makes it happen. In our example above our file resource will translate our desired state into regular PowerShell code, most likely using the same &lt;code>New-Item&lt;/code> cmdlet that we had in our example. This resource is built into Windows so we can’t examine it to prove that.&lt;/p>
&lt;p>There are currently 22 resources available within the built in PSDesiredStateConfiguration module. The table below contains the descriptions of a few, for a full list you can review the &lt;a class="link" href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/builtinresource" target="_blank" rel="noopener"
>Microsoft docs&lt;/a>.&lt;/p>
&lt;p>[table id=2 /]&lt;/p>
&lt;p>On top of these built in resources are hundreds more that have been developed by Microsoft, or by the community. They come packaged just like modules and most can be installed directly from the &lt;a class="link" href="https://www.powershellgallery.com/packages?q=DSC" target="_blank" rel="noopener"
>PowerShell Gallery&lt;/a>), some examples are:&lt;/p>
&lt;p>[table id=5 /]&lt;/p>
&lt;p>As you can see DSC can be used to configure a wide variety of components. We can collect resources from several modules and then combine them into one configuration document to describe our desired state.&lt;/p>
&lt;h3 id="idempotent">Idempotent&lt;/h3>
&lt;p>Another interesting aspect of DSC is that the resources are written to be idempotent. This means that in our file example above if the folder already exists it won’t try and create it again.&lt;/p>
&lt;p>There are two main types of resources, class based and MOF based. We’ll be focusing on MOF based in this post.  Within each resource are three functions: &lt;code>Get-TargetResource&lt;/code>, &lt;code>Set-TargetResource&lt;/code> and &lt;code>Test-TargetResource&lt;/code>.  When you run a configuration that contains our file resource example, the &lt;code>Test-TargetResource&lt;/code> will fire first to see whether we’re already in the desired state. That function returns true or false. If the directory doesn’t exist, the &lt;code>Set-TargetResource&lt;/code> will fire to create the folder.&lt;/p>
&lt;p>On the other hand, if we ran the &lt;code>New-Item&lt;/code> snippet and the directory already existed it would throw errors. To avoid this, we would have to wrap it with extra logic ourselves to test whether the folder exits as expected and if not, go ahead and create it.&lt;/p>
&lt;h3 id="so-why-use-desired-state-configuration">So Why Use Desired State Configuration?&lt;/h3>
&lt;p>DSC is a framework that provides the ability to manage our infrastructure with Configuration as Code.  There are several benefits to managing our infrastructure this way. The two biggest reasons I think DSC will work well in my particular scenario is automation and that my infrastructure will be in source control.&lt;/p>
&lt;p>DSC enables automation for building SQL Servers by creating a configuration document that defines exactly how the server should be built. For example, the document tells you things like where the database data and log files should be stored, how tempdb is configured, and whether database mail is enabled.&lt;/p>
&lt;p>The configuration document can then be combined with configuration data, which contains values specific to this build. For example the instance name and perhaps the edition and version of SQL Server to install would be found in the configuration data.  We can reuse the same configuration document for every server, all we would need to do is provide the appropriate configuration data.&lt;/p>
&lt;p>Using configuration as code for building SQL Servers gives us another great benefit because these documents can be checked into source control.  We now know exactly what the servers should look like, and when we make a change that will be tracked in source control. This creates documentation on your entire build. If you needed to rebuild a server during disaster recovery, for example, you could just push that configuration out to a new server and wait for it to end up in your desired state.&lt;/p>
&lt;h3 id="resources-1">Resources&lt;/h3>
&lt;p>If you want to know more about DSC I have listed a few links below. I also plan on expanding this post into a series covering general DSC concepts as well as the specifics for managing SQL Servers with DSC.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.amazon.com/PowerShell-Desired-State-Configuration-Depth-ebook/dp/B07CNQD3M9/ref=sr_1_1" target="_blank" rel="noopener"
>Pro PowerShell Desired State Configuration: An In-Depth Guide to Windows PowerShell DSC&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.microsoft.com/en-us/powershell/dsc/overview/overview" target="_blank" rel="noopener"
>Windows PowerShell Desired State Configuration&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.microsoft.com/en-us/powershell/dsc/configurations/configdata" target="_blank" rel="noopener"
>Using configuration data in DS&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.microsoft.com/en-us/azure/devops/learn/what-is-infrastructure-as-code" target="_blank" rel="noopener"
>Infrastructure as Code&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>T-SQL Tuesday #110 - "Automate All the Things"</title><link>https://jpomfret.github.io/p/t-sql-tuesday-#110-automate-all-the-things/</link><pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate><guid>https://jpomfret.github.io/p/t-sql-tuesday-#110-automate-all-the-things/</guid><description>&lt;p>&lt;a class="link" href="https://garrybargsley.com/t-sql-tuesday-110-automate-all-the-things/" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/tsqltues.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Automation is something that interests me greatly, and I think if you have read even one of my previous posts you’ll know that my favorite tool for this kind of work is PowerShell.  This is the perfect topic to kick off T-SQL Tuesday for 2019 so thanks goes to Garry Bargsley for hosting this month.&lt;/p>
&lt;p>One of my goals for 2019 is to improve our server build process, it’s currently reasonably well scripted but there are some definite gaps. I’ve started looking at using PowerShell Desired State Configuration (DSC) to install and configure SQL Server to both meet our needs and increase our speed and efficiency. Although full automation is a stretch goal for this project the DSC technology can certainly scale to accomplish that.&lt;/p>
&lt;h3 id="powershell-desired-state-configuration">PowerShell Desired State Configuration&lt;/h3>
&lt;p>PowerShell DSC is a platform to support the concept of Infrastructure as Code (IaC).  It uses declarative syntax instead of the usual imperative syntax of PowerShell.  This means that you describe your desired state rather than the specific steps needed to get there.  There are two modes for DSC, push and pull, although pull mode offers more features and scalability, we’ll look at writing our configuration and using push mode for this blog post to keep it simple.&lt;/p>
&lt;p>I hope that this blog post will be the first of a series this year as I work to finalize the full process of installing and configuring SQL Server with DSC. For now I will share step 1, ensuring the freshly built Windows OS meets the necessary prerequisites for the SQL Server installation.  Today we’ll look at installing two Windows Features ‘.NET 3.5 Features’ and ‘Active Directory module for Windows PowerShell’ on our target node.&lt;/p>
&lt;p>The first thing we’ll want to do is to update the in-box DSC resources, PSDesiredStateConfiguration. This version comes with Windows PowerShell 4.0 and 5.0 however there have been notable improvements that we will want to take advantage of.  Since the updated module is available in the PowerShell Gallery we can install it to our workstation using the following (note the name change):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Install-Module PSDSCResources
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Since we are using the push mode we need to make sure any modules we use to write our configurations are available on our target nodes.  I have manually copied the &lt;code>PSDSCResource&lt;/code> module to a path within the &lt;code>$env:PSModulePath&lt;/code> on the target node so it’ll be available when the configuration is enacted there. There are other ways to handle this including setting up a resource module file share.&lt;/p>
&lt;h3 id="writing-our-first-configuration">Writing our First Configuration&lt;/h3>
&lt;p>We’re now ready to write our first configuration, although we are still writing PowerShell the syntax is a little different.  One of my favorite things about PowerShell is using the command based help to discover how to execute new cmdlets and functions, DSC is no different here. We can use &lt;code>Get-DscResource&lt;/code> to list all the resources we have available.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/GetDscResource.jpg"
loading="lazy"
>&lt;/p>
&lt;p>Since we are going to use the WindowsFeature resource we can find out how to use that by passing in the &lt;code>-Syntax&lt;/code> parameter to &lt;code>Get-DscResource&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://jpomfret.github.io/images/WindowsFeatureSyntax.jpg"
loading="lazy"
>&lt;/p>
&lt;p>The only required parameter for the WindowsFeature resource is Name so we’ll include that.  I also like to include the ‘Ensure’ parameter, it defaults to ‘Present’ but I feel it makes it clearer to specifically define that.  I also want to set ‘IncludeAllSubFeature’ to true so those get installed also. &lt;/p>
&lt;p>The below code is all we need to get started with our first configuration. Apart from the resource blocks that we have already mentioned there are a couple of other important parts to note. First is the keyword &lt;code>Configuration&lt;/code> which shows we are writing a DSC Configuration document. In this case I’ve named our configuration ‘SQLServerPreReq’. Secondly, the &lt;code>Node&lt;/code> keyword is important, this defines the target node for our configuration.  It’s important to remember that this is a simple example, it is possible to pass in multiple node names or to parameterize that node name to make our configuration more useful.&lt;/p>
&lt;p>The last line of code calls our SQLServerPreReq configuration and specifies the output path.  When you call a configuration a MOF file is created which is the document that will be sent to the target node and used to both enact the configuration and monitor for configuration drift (a feature of the pull mode that we’ll save for a future post).&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Configuration SQLServerPreReq {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Import-DscResource -ModuleName PSDSCResources
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Node &amp;#39;DscSvr2&amp;#39; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WindowsFeature dotNet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Name = &amp;#39;NET-Framework-Features&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Ensure = &amp;#39;Present&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IncludeAllSubFeature = $true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WindowsFeature ADPowershell
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Name = &amp;#39;RSAT-AD-PowerShell&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Ensure = &amp;#39;Present&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IncludeAllSubFeature = $true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SQLServerPreReq -Output .\Output\
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Once we have our MOF file the final step is to enact our configuration against our target node.  I’m using the &lt;code>-wait&lt;/code> and &lt;code>-verbose&lt;/code> parameters so that the configuration doesn’t run in the background and we can view the verbose messages on screen as it executes.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Start-DscConfiguration -Path .\Output\ -Wait -Verbose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://jesspomfret.com/wp-content/uploads/2019/01/startDscConfiguration1-1.jpg" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/startDscConfiguration1-1.jpg"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Once this runs successfully you can confirm the features are installed using &lt;code>Get-WindowsFeature&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Get-WindowsFeature -ComputerName dscsvr2 `
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-Name @(&amp;#39;RSAT-AD-PowerShell&amp;#39;,&amp;#39;NET-Framework-Features&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://jpomfret.github.io/images/GetWindowsFeature.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="using-composite-resources">Using Composite Resources&lt;/h3>
&lt;p>This simple configuration shows how you can install two windows features using PowerShell DSC, however it is rather redundant to have to specify separate resource blocks for each feature.  Since we updated our in-box DSC Resources to the newer PSDSCResources module we are able to use the new WindowsFeatureSet resource which is an example of a composite resource. We can review the syntax again using Get-DscResource:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Get-DscResource -Name WindowsFeatureSet -Syntax
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The main difference is that WindowsFeatureSet takes an array of features to install and then translates this to use multiple WindowsFeature resources when the MOF file is created.  This allows us to keep our configuration document as tidy and concise as possible.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Configuration SQLServerPreReq_v2 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Import-DscResource -ModuleName PSDSCResources
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Node &amp;#39;DscSvr2&amp;#39; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WindowsFeatureSet PreReqFeatures
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Name = @(&amp;#39;NET-Framework-Features&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;RSAT-AD-PowerShell&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Ensure = &amp;#39;Present&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IncludeAllSubFeature = $true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SQLServerPreReq_v2 -Output .\Output\
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>That’s step one towards automating my SQL Server builds, I’m looking forward to adding more to this series. Thanks again to Garry for picking the perfect T-SQL Tuesday topic to kick off the year with.&lt;/p></description></item><item><title>T-SQL Tuesday #108 - Non SQL Server Technologies</title><link>https://jpomfret.github.io/p/t-sql-tuesday-#108-non-sql-server-technologies/</link><pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate><guid>https://jpomfret.github.io/p/t-sql-tuesday-#108-non-sql-server-technologies/</guid><description>&lt;p>&lt;a class="link" href="https://curiousaboutdata.com/2018/10/29/t-sql-tuesday-108-invitation-non-sql-server-technologies/" target="_blank" rel="noopener"
>&lt;img src="https://jpomfret.github.io/images/tsqltues.png"
loading="lazy"
>&lt;/a>It’s T-SQL Tuesday time again, I have struggled in the last month or two to get anything up on my blog. Turns out weddings are pretty time consuming ?! Now that I’m happily married and home from an amazing &lt;a class="link" href="https://www.instagram.com/jpomfret/" target="_blank" rel="noopener"
>honeymoon in Hawaii&lt;/a> it’s back to work on my blog and professional development.  Which makes this T-SQL Tuesday topic a perfect one to get back to, so thanks to Malathi Mahadeven (&lt;a class="link" href="https://curiousaboutdata.com" target="_blank" rel="noopener"
>B&lt;/a>|&lt;a class="link" href="https://twitter.com/sqlmal" target="_blank" rel="noopener"
>T&lt;/a>) for hosting this month.&lt;/p>
&lt;p>I feel like with last week’s PASS Summit (I didn’t attend this year so just watching from afar) it makes it even harder than usual to pick just one thing to learn.  There are so many things right now that I want to read about or fiddle with.&lt;/p>
&lt;p>I’ve decided to pick a main subject, with an auxiliary bonus area attached - kind of cheating, I know.  I’ve been working on a project at work to automate our SQL Server builds with Powershell Desired State Configuration (DSC) so this will be my main goal. I already have a basic understanding of how DSC works and how to install SQL Server with it, I want to improve this knowledge to the point where I can present a session on it.&lt;/p>
&lt;p>The side goal is docker/containers/kubernetes (maybe), I’m wondering if I could use these to test my DSC configurations, maybe not to install SQL Server (I have no idea though) but I imagine I could configure SQL Server running in a container.&lt;/p>
&lt;p>I saw the tweet below last week from the beard, &lt;a class="link" href="https://twitter.com/sqldbawithbeard" target="_blank" rel="noopener"
>Rob Sewell&lt;/a>, that quoted &lt;a class="link" href="https://twitter.com/bobwardms" target="_blank" rel="noopener"
>Bob Ward’s&lt;/a> thoughts on learning directions.  Feels like this is probably solid advice to justify my side goal.&lt;/p>
&lt;p>&lt;a class="link" href="https://twitter.com/sqldbawithbeard/status/1061032613979267072" target="_blank" rel="noopener"
>https://twitter.com/sqldbawithbeard/status/1061032613979267072&lt;/a>&lt;/p>
&lt;h2 id="learning-plan">Learning Plan&lt;/h2>
&lt;h4 id="learn-dsc-basics--completed">Learn DSC Basics – completed&lt;/h4>
&lt;p>I’ve already started learning DSC, I was lucky enough to take a PowerShell DSC class a couple of months ago and that combined with reading online documentation and blogs has given me a good base.&lt;/p>
&lt;p>Resources:&lt;/p>
&lt;ul>
&lt;li>Microsoft Docs - &lt;a class="link" href="https://docs.microsoft.com/en-us/powershell/dsc/overview" target="_blank" rel="noopener"
>https://docs.microsoft.com/en-us/powershell/dsc/overview&lt;/a>&lt;/li>
&lt;li>SQLServerDSC Github - &lt;a class="link" href="https://github.com/PowerShell/SqlServerDsc" target="_blank" rel="noopener"
>https://github.com/PowerShell/SqlServerDsc&lt;/a>&lt;/li>
&lt;li>DSC Install of SQL Server &lt;a class="link" href="https://chrislumnah.com/2017/03/07/dsc-install-of-sql-server/" target="_blank" rel="noopener"
>https://chrislumnah.com/2017/03/07/dsc-install-of-sql-server/&lt;/a>&lt;/li>
&lt;li>Making modules available in Push mode &lt;a class="link" href="http://nanalakshmanan.com/blog/Push-Config-Pull-Module/" target="_blank" rel="noopener"
>http://nanalakshmanan.com/blog/Push-Config-Pull-Module/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="learn-more-about-how-dsc-resources-are-written-and-developed">Learn more about how DSC resources are written and developed&lt;/h4>
&lt;p>This is where I currently am, I have the basics up and running to install SQL Server (blog post coming one day) but there are things I’d like to configure that aren’t currently built into the SQLServerDSC module.  Since this is open sourced on github I have the opportunity to learn while doing, I’ve already started working on adding an SQL Agent Operator resource so I can configure an operator during my install.&lt;/p>
&lt;h4 id="dsc-sql-server-and-containers">DSC, SQL Server and Containers?&lt;/h4>
&lt;p>Can I even use DSC to configure SQL Server running in a container? I have no idea, but I plan on finding out.  If this is possible it feels like this would be a really easy way to spin up ‘unconfigured’ SQL Server and test my configurations.  If not – hey maybe I learned a bit about containers along the way, and it feels like those are only getting more mainstream.&lt;/p>
&lt;h4 id="final-goal---present-a-dsc-session">Final goal - Present a DSC session&lt;/h4>
&lt;p>My final goal is to create a &amp;lsquo;Automate your SQL Server Install with DSC&amp;rsquo; session. Presenting on something forces you to learn it in depth, this will be great for myself and hopefully the community. Hopefully it&amp;rsquo;ll make its way to a SQL Saturday next year.  The session would be a crash course on DSC specifically to install and configure SQL Server with the end goal of attendees being able to use this process to automate their own builds. Watch this space, currently in the idea phase.&lt;/p></description></item></channel></rss>